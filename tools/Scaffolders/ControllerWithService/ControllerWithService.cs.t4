<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(Model.ServiceNamespace)) { #>
using <#= Model.ServiceNamespace #>;
<# } #>
<# if(!string.IsNullOrEmpty(Model.BaseControllerNamespace)) { #>
using <#= Model.BaseControllerNamespace #>;
<# } #>
<# if(Model.CreateViewModels) { #>
using <#= Model.ViewModelNamespace + "." + Model.ModelTypePluralized #>;
<# } #>
<# if (!string.IsNullOrEmpty(Model.CommonExtensionNamespace)) { #>
using <#= Model.CommonExtensionNamespace #>;
<# } #>


namespace <#= Model.ControllerNamespace #>
{   
<#  
    var modelType = (CodeType)Model.ModelType;
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized;
    var serviceName = modelName + "Service";
    var serviceVariableName = modelName.ToLower() + "Service";
    var modelVariable = modelName.ToLower();

    var relatedEntities = modelType.VisibleMembers().OfType<CodeProperty>().Where(x => x.Getter.CanOverride);
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);

    var relatedEntitiesOneToMany = GetManyToOneEntities(modelType.VisibleMembers().OfType<CodeProperty>().ToList()); 
        
    var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
#>
    public class <#= Model.ControllerName #> : BaseController
    {
        private readonly I<#= serviceName #> _<#= serviceVariableName #>;
					
		<# foreach (var item in relatedEntitiesOneToMany) {#>			
			
		private readonly I<#= item #>Service _<#= FixNamingConvention(item) #>Service ;											
	    
		<#} #>
		
		
        <# if(Model.NoIoc) { #>

        // If you are using Dependency Injection, you can delete the following constructor
        public <#= Model.ControllerName #>() : this(new <#= serviceName #>())
        {
        }
        <# } #>

        public <#= Model.ControllerName #>(I<#= serviceName #> <#= serviceVariableName #> 
			<# 
				relatedEntitiesOneToMany.ForEach(entity => {#>
					, I<#= entity #>Service <#= FixNamingConvention(entity) #>Service 
				<#});
		
		    #>
		)
        {
            _<#= serviceVariableName #> = <#= serviceVariableName #>;
			
				<# 
				relatedEntitiesOneToMany.ForEach(entity => {#>
		    _<#= FixNamingConvention(entity) #>Service =  <#= FixNamingConvention(entity) #>Service;
				<#});
		
		    #>
        }

        //
        // GET: /<#= routingName #>/

        public ViewResult Index()
        {
     <# if(relatedEntities.Any()) {
           var lambaVariable = modelName[0].ToString().ToLower();
           var includeValues = relatedEntities.Select(x => lambaVariable + " => " + lambaVariable + "." + x.Name); #>
       return View(_<#= serviceVariableName #>.QueryByIncludeProperties(<#= string.Join(", ", includeValues) #>));
    <# } else { #>
       return View(_<#= serviceVariableName #>.FindAll());
    <# } #>
    }

        //
        // GET: /<#= routingName #>/Details/5

        public ViewResult Details(<#= modelName #> id)
        {
            return View(id);
        }

        //
        // GET: /<#= routingName #>/Create

        public ActionResult Create()
        {
            <#=((Model.CreateViewModels) ? "var model = new " + modelName + "CreateModel();" : string.Empty) #>
            return View(<#=(Model.CreateViewModels) ? "model" : string.Empty #>);
        } 

        //
        // POST: /<#= routingName #>/Create
       
        [HttpPost]
        public ActionResult Create(<#= (!Model.CreateViewModels) ? modelName : modelName + "CreateModel" #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
                _<#=serviceVariableName #>.Create<#=(!Model.CreateViewModels) ? string.Empty : "FromModel" #>(<#= modelVariable #>);
                
                return RedirectToAction("Index");
            }
            
            return View(<#=(Model.CreateViewModels) ? modelVariable : string.Empty #>);
        }
        
        //
        // GET: /<#= routingName #>/Edit/5
 
        public ActionResult Edit(<#= modelName #> id)
        {
             <#=((Model.CreateViewModels) ? "var model = id.MapTo(new " + modelName + "EditModel());" : string.Empty) #>
             return View(<#=(Model.CreateViewModels) ? "model" : "id" #>);
        }

        //
        // POST: /<#= routingName #>/Edit/5

        [HttpPost, ActionName("Edit")]
        public ActionResult EditPosted(<#= (!Model.CreateViewModels) ? modelName : modelName + "EditModel" #> <#= modelVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return View(<#= modelVariable #>);                
            }
            
            _<#=serviceVariableName #>.Update<#=(!Model.CreateViewModels) ? string.Empty : "FromModel" #>(<#= modelVariable #>);
            return RedirectToAction("Index");
        }

        //
        // GET: /<#= routingName #>/Delete/5
 
        public ActionResult Delete(<#= modelName #> id)
        {
            return View(id);
        }

        //
        // POST: /<#= routingName #>/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
            _<#=serviceVariableName #>.Delete(id);

            return RedirectToAction("Index");
        }
    }
}

<#+

List<string> GetManyToOneEntities(List<CodeProperty> codeProperties)
{
	var results = new List<string>();
	
		foreach (var item in codeProperties) { 			
			var baseMembers = item.Type.CodeType.Bases.OfType<CodeType>().Where(f => f.Name == "BaseReferenceEntity").ToList();
			if (baseMembers.Count > 0 && Model.CreateViewModels) { results.Add(item.Name);	}}	
						
	return results;
}


string FixNamingConvention(string source)
{   
	if (string.IsNullOrEmpty(source) || source.Length < 2) return source;
	
	return source.Substring(0,1).ToLower() + source.Substring(1);		
}
		
#>